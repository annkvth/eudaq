name: linux_gcc

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        qt_version: [5, 6]
        compiler: [gcc-latest]
        
    name: eudaq_full_build-ubuntu-latest-${{matrix.compiler}}-qt-${{matrix.qt_version}}

    steps:
    - uses: actions/checkout@v4
    
    - name: update repo
      run: |
        sudo apt-get update
        
    - name: Install C++ compiler
      id: install_cc
      uses: rlalik/setup-cpp-compiler@master
      with:
          compiler: ${{ matrix.compiler }}

    - name: install qt
      run: |
        if [ "${{ matrix.qt_version }}" -eq "5" ];
        then 
          sudo apt-get install qtbase5-dev qt5-qmake
        fi
        if [ "${{ matrix.qt_version }}" -eq "6" ]; 
        then 
          sudo apt-get install qt6-base-dev
        fi
      shell: bash
        
    - name: install CERN ROOT
      run: |
        sudo apt-get install binutils cmake dpkg-dev g++ gcc libssl-dev git libx11-dev libxext-dev libxft-dev libxpm-dev python3 libtbb-dev
        export CERN_ROOT_DOWNLOAD_NAME=root_v6.32.02.source.tar.gz
        wget -nv https://root.cern/download/$CERN_ROOT_DOWNLOAD_NAME
        mkdir root_source
        tar -xzf $CERN_ROOT_DOWNLOAD_NAME -C ./root_source --strip-components=1
        rm -f $CERN_ROOT_DOWNLOAD_NAME
        mkdir -p ~/eudaq_dependencies/ubuntu22-x86_64/root/
        mkdir root_build
        cd root_build
        echo "C++ compiler used: ${{ steps.install_cc.outputs.cxx }}"
        echo "C compiler used: ${{ steps.install_cc.outputs.cc }}"
        cmake -D CMAKE_CXX_COMPILER=${{ steps.install_cc.outputs.cxx }} -D CMAKE_C_COMPILER=${{ steps.install_cc.outputs.cc }} -DCMAKE_INSTALL_PREFIX=~/eudaq_dependencies/ubuntu22-x86_64/root/ -Dclad=OFF -Dxrootd=OFF ..
        make -j12 install
        cd ..
        rm -rf root_source
        rm -rf root_build

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        source ~/eudaq_dependencies/ubuntu22-x86_64/root/bin/thisroot.sh
        cmake -D CMAKE_CXX_COMPILER=${{ steps.install_cc.outputs.cxx }} -D EUDAQ_BUILD_STDEVENT_MONITOR=ON -D EUDAQ_BUILD_GUI=ON -D USER_BUILD_TLU_ONLY_CONVERTER=ON -D USER_EUDET_BUILD=ON -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
      
